using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Text;
using ASI.AB.Domain;
using ASI.AB.Domain.Fields;
using ASI.AB.Domain.Constants;
//using DocumentFormat.OpenXml.Wordprocessing;
//using DocumentFormat.OpenXml.Spreadsheet;
using GemBox.Document;
using RestSharp;
using System.IO;

//using Novacode;

namespace ASI.AB.ApiTests
{

    [TestClass]
    public class EmptySectionTests : TestHelper
    {
       

        [TestInitialize]
        public void TestInitialize()
        {
             String currentPath = System.IO.Directory.GetParent(System.IO.Directory.GetParent(Environment.CurrentDirectory).ToString()).ToString();
            //  String strContainerFile = System.IO.Directory.GetParent(currentPath).ToString() +
            //    "\\Docker\\WebApp\\containerIp.txt";

            // path for storing template for testing
             downLoadPath = currentPath + "\\Resourses\\EmptySection";
          //  downLoadPath = @"E:\Resource\EmptySection";

            //string ipAddress = GetIp(strContainerFile);      

            // setting the REST path for testing
            //restClient = new RestClient($"http://{ipAddress}/");
             restClient = new RestClient("http://172.30.125.132/");

            restRequest = new RestRequest("agendabuilder/getagenda", Method.POST);
        }


        [TestMethod]
        public void Validate_Heading1()
        {

            restRequest.RequestFormat = DataFormat.Json;      

            // request       
            

            var agenda = new Agenda
            {
                Sections = new List<Domain.Section>
                {
                      new Domain.Section
                      {
                        TemplateId = TemplateId.Section0,
                        Rows = new List<Row>
                        {
                            new Domain.Row
                            {
                                Fields = new List<FieldBase>
                                {
                                    new TextField
                                    {
                                        Name = SectionFieldNames.Name,
                                        Content = "This is Heading1 - Important Reminders"
                                    },
                                }
                            },
                        }
                      },
                }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            File.WriteAllBytes(downLoadPath + "\\Header1.docx", response);
           
            // retriving text from word based on location   

            getHeader header = new getHeader();
            string strHead1Expected = "This is Heading1 - Important Reminders";

            string strHead1Actual = header.GetHeaderfromWord(downLoadPath + "\\Header1.docx",1);
        
            // ASSERT
            Assert.AreEqual(strHead1Expected, strHead1Actual);
          


        }
        

        [TestMethod]
        public void Validate_Heading2()
        {
            restRequest.RequestFormat = DataFormat.Json;

            // request       

            var agenda = new Agenda
            {
                Sections = new List<Domain.Section>
                {
                    new Domain.Section
                    {
                        TemplateId = TemplateId.Section0,
                        Rows = new List<Row>
                        {
                            new Domain.Row
                            {
                                Fields = new List<FieldBase>
                                {
                                    new TextField
                                    {
                                        Name = SectionFieldNames.Name,
                                        Content = "This is Heading1 - Important Reminders"
                                    },
                                }
                            },
                        }
                    },
                    new Domain.Section
                    {
                        TemplateId = TemplateId.Section0,
                        Rows = new List<Row>
                        {
                            new Domain.Row
                            {
                                Fields = new List<FieldBase>
                                {
                                    new TextField
                                    {
                                        Name = SectionFieldNames.Name,
                                        Content = "This is Heading2 - Guest Speaker"
                                    },
                                }
                            },
                        }
                    },


                }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            File.WriteAllBytes(downLoadPath + "\\Header2.docx", response);


            // retriving text from word based on location   

            getHeader header = new getHeader();
            string strHead1Expected = "This is Heading2 - Guest Speaker";

            string strHead1Actual = header.GetHeaderfromWord(downLoadPath + "\\Header2.docx",2).Trim();
           
            // ASSERT
            Assert.AreEqual(strHead1Expected, strHead1Actual);        

        }
        
    }




    public class getHeader
    {

        public String GetHeaderfromWord(string filename, int hdr)
        {
            ComponentInfo.SetLicense("FREE-LIMITED-KEY");
            //string downLoadPath = @"E:\Resource\EmptySection";
          //  string path = @"E:\GitRepositories2\AgendaBuilder\ASI.AB.ApiTests\Resourses\EmptySection";

            //DocumentModel document = DocumentModel.Load(path + "\\EmptySection.docx");
            DocumentModel document = DocumentModel.Load(filename);
            StringBuilder sb = new StringBuilder();
            int num = 0; 

            // foreach (Paragraph paragraph in document.GetChildElements(true, ElementType.Paragraph))
          
            {
                foreach (HeaderFooter header in document.GetChildElements(true, ElementType.HeaderFooter))
                {

                    foreach (Run run in header.GetChildElements(true, ElementType.Run))
                    {                       
                        string text = run.Text;
                                             
                            return text;                       
                        
                    }
                    sb.AppendLine();
                }
                num++;
            }
          
            return sb.ToString();

            //Console.WriteLine(sb.ToString());

        }

    }



}









