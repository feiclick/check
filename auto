using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using NLog;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Net.Mail;
using ASI.AB.Domain;
using ASI.AB.Domain.Constants;
using ASI.AB.Domain.Fields;
using ASI.AB.Domain.Sections;
using ASI.AB.IntegrationTests;
//using ASI.AB.Domain;
//using ASI.AB.Domain.Constants;
//using ASI.AB.Domain.Fields;
//using ASI.AB.Domain.Sections;
using Newtonsoft.Json.Linq;
//using Novacode;
using RestSharp;
using SautinSoft.Document;
using SautinSoft.Document.Drawing;
using System.Drawing;


namespace AgendaBuilder
{
    [TestClass]
    public class AgendaBuilderTests : TestHelper
    {


        [TestInitialize]
        public void TestInitialize()
        {
            // will be replaced by reading value from a file 
            restClient = new RestClient("http://172.22.174.110/");
            restRequest = new RestRequest("agendabuilder/getagenda", Method.POST);


        }


        [TestMethod]
        //1. positive--MainTitle
        public void AB_ValidateDoc_With_MainTitle_Only()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strMaintitleExpected = "This is MainTitle";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitleExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\MainTitle.docx";
            File.WriteAllBytes(downLoadPath, response);
            // retriving text from word based on location
            String strMainTitleActual = GetDataFromWord(downLoadPath, 1).Trim();

            // ASSERT
            Assert.AreEqual(strMaintitleExpected, strMainTitleActual);
        }


        [TestMethod]
        //2. positive--SubTitles
        public void AB_ValidateDoc_With_SubTitles_Only()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strSubtitle1Expected = "This is SubTitle1";
            String strSubtitle2Expected = "This is SubTitle2";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.SubTitle1,
                                 Content = strSubtitle1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },

                             new TextField
                             {
                                 Name = CoverSectionFieldNames.SubTitle2,
                                 Content = strSubtitle2Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);

            downLoadPath = "C:\\AgendaBuilder\\SubTitles.docx";

            File.WriteAllBytes(downLoadPath, response);

            // retriving text from word based on location
            String strSubtitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strSubtitle2Actual = GetDataFromWord(downLoadPath, 1).Trim();


            // ASSERT
            Assert.AreEqual(strSubtitle1Expected, strSubtitle1Actual);
            Assert.AreEqual(strSubtitle2Expected, strSubtitle2Actual);

        }

        [TestMethod]
        //3. positive--Titles
        public void AB_ValidateDoc_With_Titles_Only()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strTitle1Expected = "This is Title1";
            String strTitle2Expected = "This is Title2";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.Title1,
                                 Content = strTitle1Expected,  
                             },
                             {
                                 Name = CoverSectionFieldNames.Title2,
                                 Content = strTitle2Expected
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);

            downLoadPath = "C:\\AgendaBuilder\\SubTitles.docx";

            File.WriteAllBytes(downLoadPath, response);

            // retriving text from word based on location
            String strTitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strTitle2Actual = GetDataFromWord(downLoadPath, 1).Trim();


            // ASSERT
            Assert.AreEqual(strTitle1Expected, strTitle1Actual);
            Assert.AreEqual(strTitle2Expected, strTitle2Actual);

        }


        [TestMethod]
        //4. positive--Texts
        public void AB_ValidateDoc_With_Texts_Only()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strText1Expected = "This is Text1";
            String strText2Expected = "This is Text2";
            String strText3Expected = "This is Text3";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.Text1,
                                 Content = strText1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             
                             {
                                 Name = CoverSectionFieldNames.Text2,
                                 Content = strText2Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#00FF7F"
                                 }
                             },
                            
                             {
                                Name = CoverSectionFieldNames.Text3,
                                Content = strText3Expected,
                                Font = new ASI.AB.Domain.Fields.Font
                                {
                                    "Color" = "#FF42225D"
                                }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);

            downLoadPath = "C:\\AgendaBuilder\\Texts.docx";
            File.WriteAllBytes(downLoadPath, response);
            // retriving text from word based on location
            String strText1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText2Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText3Actual = GetDataFromWord(downLoadPath, 1).Trim();

            // ASSERT
            Assert.AreEqual(strText1Expected, strText1Actual);
            Assert.AreEqual(strText2Expected, strText2Actual);
            Assert.AreEqual(strText3Expected, strText3Actual);
        }

        [TestMethod]
        //5. positive--Full section without Image
        public void AB_ValidateDoc_With_Duplicate_MainTitle()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string

            String strMaintitleExpected = "This is a MainTitle";
            String strSubtitle1Expected = "This is SubTitle1";
            String strSubtitle2Expected = "This is SubTitle2";
            String strTitle1Expected = "This is Title1";
            String strTitle2Expected = "This is Title2";
            String strText1Expected = "This is Text1";
            String strText2Expected = "This is Text2";
            String strText3Expected = "This is Text3";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField

                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitleExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             {
                                 Name = CoverSectionFieldNames.SubTitle1,
                                 Content = strSubtitle1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             {
                                 Name = CoverSectionFieldNames.SubTitle2,
                                 Content = strSubtitle2Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },

                             {
                                 Name = CoverSectionFieldNames.Title1,
                                 Content = strTitle1Expected
                             },
                             {
                                 Name = CoverSectionFieldNames.Title2,
                                 Content = strTitle2Expected
                             },
                             {
                                 Name = CoverSectionFieldNames.Text1,
                                 Content = strText1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },

                             {
                                 Name = CoverSectionFieldNames.Text2,
                                 Content = strText2Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#00FF7F"
                                 }
                             },

                             {
                                Name = CoverSectionFieldNames.Text3,
                                Content = strText3Expected,
                                Font = new ASI.AB.Domain.Fields.Font
                                {
                                    "Color" = "#FF42225D"
                                }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);

            downLoadPath = "C:\\AgendaBuilder\\SectionwithoutImage.docx";
            File.WriteAllBytes(downLoadPath, response);

            // retriving text from word based on location

            String strMainTitleActual = GetDataFromWord(downLoadPath, 1).Trim();
            String strSubtitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strSubtitle2Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strTitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strTitle2Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText2Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText3Actual = GetDataFromWord(downLoadPath, 1).Trim();
            
            // ASSERT
            Assert.AreEqual(strMaintitleExpected, strMainTitleActual);
            Assert.AreEqual(strSubtitle1Expected, strSubtitle1Actual);
            Assert.AreEqual(strSubtitle2Expected, strSubtitle2Actual);
            Assert.AreEqual(strTitle1Expected, strTitle1Actual);
            Assert.AreEqual(strTitle2Expected, strTitle2Actual);
            Assert.AreEqual(strText1Expected, strText1Actual);
            Assert.AreEqual(strText2Expected, strText2Actual);
            Assert.AreEqual(strText3Expected, strText3Actual);

        }



        [TestMethod]
        //6. MainTitle >20 chracters
        public void AB_ValidateDoc_With_MainTitle_Only()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strMaintitleExpected = "This is MainTitle which is over 20 characters";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitleExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\MainTitle.docx";
            File.WriteAllBytes(downLoadPath, response);
            // retriving text from word based on location
            String strMainTitleActual = GetDataFromWord(downLoadPath, 1).Trim();

            // ASSERT
            Assert.AreEqual(strMaintitleExpected, strMainTitleActual);
        }

        [TestMethod]
        //7. MainTitle with Special characters
        public void AB_ValidateDoc_With_SpecialCharacter()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strMaintitleExpected = "!<@%&(©!~`-\/";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitleExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\MainTitle_SpecialCharacters.docx";
            File.WriteAllBytes(downLoadPath, response);
            // retriving text from word based on location
            String strMainTitleActual = GetDataFromWord(downLoadPath, 1).Trim();

            // ASSERT
            Assert.AreEqual(strMaintitleExpected, strMainTitleActual);
        }


        [TestMethod]
        //8. positive--Full section with Hyperlinks
        public void AB_ValidateDoc_With_Hyperlinks()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string

            String strMaintitleExpected = "https://www.yellowribbonevents.org/Login.aspx";
            String strSubtitle1Expected = "https://www.yellowribbonevents.org/Login.aspx";
            String strSubtitle2Expected = "This is SubTitle2";
            String strTitle1Expected = "https://www.yellowribbonevents.org/Login.aspx";
            String strTitle2Expected = "This is Title2";
            String strText1Expected = "https://www.yellowribbonevents.org/Login.aspx";
            String strText2Expected = "This is Text2";
            String strText3Expected = "This is Text3";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField

                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitleExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             {
                                 Name = CoverSectionFieldNames.SubTitle1,
                                 Content = strSubtitle1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             {
                                 Name = CoverSectionFieldNames.SubTitle2,
                                 Content = strSubtitle2Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },

                             {
                                 Name = CoverSectionFieldNames.Title1,
                                 Content = strTitle1Expected
                             },
                             {
                                 Name = CoverSectionFieldNames.Title2,
                                 Content = strTitle2Expected
                             },
                             {
                                 Name = CoverSectionFieldNames.Text1,
                                 Content = strText1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },

                             {
                                 Name = CoverSectionFieldNames.Text2,
                                 Content = strText2Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#00FF7F"
                                 }
                             },

                             {
                                Name = CoverSectionFieldNames.Text3,
                                Content = strText3Expected,
                                Font = new ASI.AB.Domain.Fields.Font
                                {
                                    "Color" = "#FF42225D"
                                }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);

            downLoadPath = "C:\\AgendaBuilder\\SectionwithoutImage.docx";
            File.WriteAllBytes(downLoadPath, response);

            // retriving text from word based on location

            String strMainTitleActual = GetDataFromWord(downLoadPath, 1).Trim();
            String strSubtitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strSubtitle2Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strTitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strTitle2Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText2Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText3Actual = GetDataFromWord(downLoadPath, 1).Trim();

            // ASSERT
            Assert.AreEqual(strMaintitleExpected, strMainTitleActual);
            Assert.AreEqual(strSubtitle1Expected, strSubtitle1Actual);
            Assert.AreEqual(strSubtitle2Expected, strSubtitle2Actual);
            Assert.AreEqual(strTitle1Expected, strTitle1Actual);
            Assert.AreEqual(strTitle2Expected, strTitle2Actual);
            Assert.AreEqual(strText1Expected, strText1Actual);
            Assert.AreEqual(strText2Expected, strText2Actual);
            Assert.AreEqual(strText3Expected, strText3Actual);

        }


        [TestMethod]
        //9. MainTitle with Upper&Lower case
        public void AB_ValidateDoc_With_UpperLowerCase()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strMaintitleExpected = "tHis IS MaIn TItlE-mIXed WiTh uPPeR AnD LoWER cASE";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitleExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\MainTitle_UpperLower.docx";
            File.WriteAllBytes(downLoadPath, response);
            // retriving text from word based on location
            String strMainTitleActual = GetDataFromWord(downLoadPath, 1).Trim();

            // ASSERT
            Assert.AreEqual(strMaintitleExpected, strMainTitleActual);
        }

     
        TestMethod]
        //10. MainTitle with html tags
        public void AB_ValidateDoc_With_htmltags()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string

            String strMaintitleExpected = "<i>The lightning</i>";
            String strSubtitle1Expected = "<title>SubTitle of the document</title>";
            String strText1Expected = "<h1>This is a heading</h1>";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField

                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitleExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             {
                                 Name = CoverSectionFieldNames.SubTitle1,
                                 Content = strSubtitle1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             {
                                 Name = CoverSectionFieldNames.Text1,
                                 Content = strText1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);

            downLoadPath = "C:\\AgendaBuilder\\SectionwithoutImage.docx";
            File.WriteAllBytes(downLoadPath, response);

            // retriving text from word based on location

            String strMainTitleActual = GetDataFromWord(downLoadPath, 1).Trim();
            String strSubtitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strTitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            

            // ASSERT
            Assert.AreEqual(strMaintitleExpected, strMainTitleActual);
            Assert.AreEqual(strSubtitle1Expected, strSubtitle1Actual);           
            Assert.AreEqual(strText1Expected, strText1Actual);
            

        }


        TestMethod]
        //10. MainTitle with space
        public void AB_ValidateDoc_With_space()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;

            // Test string
            String strMaintitleExpected = "bi lin gual";
            String strSubtitle1Expected = "neighbor h ood";
            String strText1Expected = "Mid -  Aut umn   Festival";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField

                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitleExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             {
                                 Name = CoverSectionFieldNames.SubTitle1,
                                 Content = strSubtitle1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             {
                                 Name = CoverSectionFieldNames.Text1,
                                 Content = strText1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);

            downLoadPath = "C:\\AgendaBuilder\\SectionwithoutImage.docx";
            File.WriteAllBytes(downLoadPath, response);

            // retriving text from word based on location

            String strMainTitleActual = GetDataFromWord(downLoadPath, 1).Trim();
            String strSubtitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strText1Actual = GetDataFromWord(downLoadPath, 1).Trim();


            // ASSERT
            Assert.AreEqual(strMaintitleExpected, strMainTitleActual);
            Assert.AreEqual(strSubtitle1Expected, strSubtitle1Actual);
            Assert.AreEqual(strText1Expected, strText1Actual);


        }




        [TestMethod]
        //Main Image jpg
        public void AB_ValidateDoc_With_MainImage_jpg()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                {
                    new SimpleSection
                    {
                        Fields = new List<FieldBase>
                        {
                            new ImageField
                            {
                                Name = CoverSectionFieldNames.MainImage,
                                Content = ReadImageFile(@"C:\\AgendaBuilder\\Images\\AFR_hotel.jpg")
                            }

                        }
                    }
                }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\MainImage_jpg.docx";

            File.WriteAllBytes(downLoadPath, response);//var responsecode = restResponse.ResponseStatus;


            // retriving images from word based on location 

            string filePath = @"C:\\AgendaBuilder\\MainImage_jpg.docx";


            DirectoryInfo imageDir = new DirectoryInfo(Path.GetDirectoryName(filePath));
            string imageTemplate = "picture";
            List<ImageData> imageInventory = new List<ImageData>();

            DocumentCore dc = DocumentCore.Load(filePath);


            // Extract all images from document 
            foreach (DrawingElement de in dc.Document.GetChildElements(true, ElementType.DrawingElement))
            {
                if (de.Shape.ShapeType == ShapeType.Picture)
                {
                    Picture pict = (Picture)de.Shape;
                    imageInventory.Add(pict.ImageData);
                }
            }

            // Save all images 
            for (int i = 0; i < imageInventory.Count; i++)
            {
                string imagePath = Path.Combine(imageDir.FullName, String.Format("{0}{1}.{2}", imageTemplate, i + 1, imageInventory[i].Format.ToString().ToLower()));
                File.WriteAllBytes(imagePath, imageInventory[i].ImageStream.ToArray());
            }

            // compare two images
            var InputImage = new Bitmap(@"C:\\AgendaBuilder\\Images\\AFR_hotel.jpg");
            var OutputImage = new Bitmap(@"C:\\AgendaBuilder\\picture1.jpeg");

            //var result = ImageCompareString(InputImage, OutputImage);
            var result = ImageCompareArray(InputImage, OutputImage);

            Assert.IsTrue(result);

        }

        //MainImage_jpeg
        public void AB_ValidateDoc_With_MainImage_jpeg()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                {
                    new SimpleSection
                    {
                        Fields = new List<FieldBase>
                        {
                            new ImageField
                            {
                                Name = CoverSectionFieldNames.MainImage,
                                Content = ReadImageFile(@"C:\\AgendaBuilder\\Images\\AFR_hotel.jpeg")
                            }

                        }
                    }
                }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\MainImage_jpeg.docx";

            File.WriteAllBytes(downLoadPath, response);//var responsecode = restResponse.ResponseStatus;


            // retriving images from word based on location 

            string filePath = @"C:\\AgendaBuilder\\MainImage_jpeg.docx";


            DirectoryInfo imageDir = new DirectoryInfo(Path.GetDirectoryName(filePath));
            string imageTemplate = "picture";
            List<ImageData> imageInventory = new List<ImageData>();

            DocumentCore dc = DocumentCore.Load(filePath);


            // Extract all images from document 
            foreach (DrawingElement de in dc.Document.GetChildElements(true, ElementType.DrawingElement))
            {
                if (de.Shape.ShapeType == ShapeType.Picture)
                {
                    Picture pict = (Picture)de.Shape;
                    imageInventory.Add(pict.ImageData);
                }
            }

            // Save all images 
            for (int i = 0; i < imageInventory.Count; i++)
            {
                string imagePath = Path.Combine(imageDir.FullName, String.Format("{0}{1}.{2}", imageTemplate, i + 1, imageInventory[i].Format.ToString().ToLower()));
                File.WriteAllBytes(imagePath, imageInventory[i].ImageStream.ToArray());
            }

            // compare two images
            var InputImage = new Bitmap(@"C:\\AgendaBuilder\\Images\\AFR_hotel.jpeg");
            var OutputImage = new Bitmap(@"C:\\AgendaBuilder\\picture1.jpeg");

            //var result = ImageCompareString(InputImage, OutputImage);
            var result = ImageCompareArray(InputImage, OutputImage);

            Assert.IsTrue(result);

        }

        //MainImage_bmp
        public void AB_ValidateDoc_With_MainImage_bmp()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                {
                    new SimpleSection
                    {
                        Fields = new List<FieldBase>
                        {
                            new ImageField
                            {
                                Name = CoverSectionFieldNames.MainImage,
                                Content = ReadImageFile(@"C:\\AgendaBuilder\\Images\\AFR_hotel.bmp")
                            }

                        }
                    }
                }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\MainImage_bmp.docx";

            File.WriteAllBytes(downLoadPath, response);//var responsecode = restResponse.ResponseStatus;


            // retriving images from word based on location 

            string filePath = @"C:\\AgendaBuilder\\MainImage.docx";


            DirectoryInfo imageDir = new DirectoryInfo(Path.GetDirectoryName(filePath));
            string imageTemplate = "picture";
            List<ImageData> imageInventory = new List<ImageData>();

            DocumentCore dc = DocumentCore.Load(filePath);


            // Extract all images from document 
            foreach (DrawingElement de in dc.Document.GetChildElements(true, ElementType.DrawingElement))
            {
                if (de.Shape.ShapeType == ShapeType.Picture)
                {
                    Picture pict = (Picture)de.Shape;
                    imageInventory.Add(pict.ImageData);
                }
            }

            // Save all images 
            for (int i = 0; i < imageInventory.Count; i++)
            {
                string imagePath = Path.Combine(imageDir.FullName, String.Format("{0}{1}.{2}", imageTemplate, i + 1, imageInventory[i].Format.ToString().ToLower()));
                File.WriteAllBytes(imagePath, imageInventory[i].ImageStream.ToArray());
            }

            // compare two images
            var InputImage = new Bitmap(@"C:\\AgendaBuilder\\Images\\AFR_hotel.bmp");
            var OutputImage = new Bitmap(@"C:\\AgendaBuilder\\picture1.jpeg");

            //var result
            var result = ImageCompareArray(InputImage, OutputImage);

            Assert.IsTrue(result);

        }
        //MainImage_jif
        public void AB_ValidateDoc_With_MainImage_jif()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                {
                    new SimpleSection
                    {
                        Fields = new List<FieldBase>
                        {
                            new ImageField
                            {
                                Name = CoverSectionFieldNames.MainImage,
                                Content = ReadImageFile(@"C:\\AgendaBuilder\\Images\\AFR_hotel.jif")
                            }

                        }
                    }
                }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\MainImage_jif.docx";

            File.WriteAllBytes(downLoadPath, response);//var responsecode = restResponse.ResponseStatus;


            // retriving images from word based on location 

            string filePath = @"C:\\AgendaBuilder\\MainImage_jif.docx";


            DirectoryInfo imageDir = new DirectoryInfo(Path.GetDirectoryName(filePath));
            string imageTemplate = "picture";
            List<ImageData> imageInventory = new List<ImageData>();

            DocumentCore dc = DocumentCore.Load(filePath);


            // Extract all images from document 
            foreach (DrawingElement de in dc.Document.GetChildElements(true, ElementType.DrawingElement))
            {
                if (de.Shape.ShapeType == ShapeType.Picture)
                {
                    Picture pict = (Picture)de.Shape;
                    imageInventory.Add(pict.ImageData);
                }
            }

            // Save all images 
            for (int i = 0; i < imageInventory.Count; i++)
            {
                string imagePath = Path.Combine(imageDir.FullName, String.Format("{0}{1}.{2}", imageTemplate, i + 1, imageInventory[i].Format.ToString().ToLower()));
                File.WriteAllBytes(imagePath, imageInventory[i].ImageStream.ToArray());
            }

            // compare two images
            var InputImage = new Bitmap(@"C:\\AgendaBuilder\\Images\\AFR_hotel.jif");
            var OutputImage = new Bitmap(@"C:\\AgendaBuilder\\picture1.jpeg");

            //var result = ImageCompareString(InputImage, OutputImage);
            var result = ImageCompareArray(InputImage, OutputImage);

            Assert.IsTrue(result);

        }

        //Sub Image jpg
        [TestMethod]
        public void AB_ValidateDoc_With_SubImage_jpg()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                {
                    new SimpleSection
                    {
                        Fields = new List<FieldBase>
                        {
                            new ImageField
                            {
                                Name = CoverSectionFieldNames.SubImage,
                                Content = ReadImageFile(@"C:\\AgendaBuilder\\Images\\AFR_logo.jpg")
                            }

                        }
                    }
                }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\SubImage_jpg.docx";

            File.WriteAllBytes(downLoadPath, response);//var responsecode = restResponse.ResponseStatus;


            // retriving images from word based on location 

            string filePath = @"C:\\AgendaBuilder\\SubImage_jpg.docx";


            DirectoryInfo imageDir = new DirectoryInfo(Path.GetDirectoryName(filePath));
            string imageTemplate = "picture";
            List<ImageData> imageInventory = new List<ImageData>();

            DocumentCore dc = DocumentCore.Load(filePath);


            // Extract all images from document 
            foreach (DrawingElement de in dc.Document.GetChildElements(true, ElementType.DrawingElement))
            {
                if (de.Shape.ShapeType == ShapeType.Picture)
                {
                    Picture pict = (Picture)de.Shape;
                    imageInventory.Add(pict.ImageData);
                }
            }

            // Save all images 
            for (int i = 0; i < imageInventory.Count; i++)
            {
                string imagePath = Path.Combine(imageDir.FullName, String.Format("{0}{1}.{2}", imageTemplate, i + 1, imageInventory[i].Format.ToString().ToLower()));
                File.WriteAllBytes(imagePath, imageInventory[i].ImageStream.ToArray());
            }

            // compare two images
            var InputImage = new Bitmap(@"C:\\AgendaBuilder\\Images\\AFR_logo.jpg");
            var OutputImage = new Bitmap(@"C:\\AgendaBuilder\\picture1.jpeg");

            //var result = ImageCompareString(InputImage, OutputImage);
            var result = ImageCompareArray(InputImage, OutputImage);

            Assert.IsTrue(result);

        }


        [TestMethod]
        //Negative
        //1. Duplicate name for Maintitle
        public void AB_ValidateDoc_With_Duplicate_MainTitle()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strMaintitle1Expected = "This is Maintitle and needs to be in line one";
            String strMaintitle2Expected = "This is Maintitle and needs to be in line one";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitle1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.MainTitle,
                                 Content = strMaintitle2Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }

                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);
            downLoadPath = "C:\\AgendaBuilder\\DupMainTitle.docx";
            File.WriteAllBytes(downLoadPath, response);//var responsecode = restResponse.ResponseStatus;
                                                       // retriving text from word based on location
            String strMaintitle2Actual = GetDataFromWord(downLoadPath, 1).Trim();

            // ASSERT
            Assert.AreEqual(strMaintitle2Expected, strMaintitle2Actual);
        }

        [TestMethod]
        //2. Duplicate name for SubTitle1
        public void AB_ValidateDoc_With_DupSubTitle1_Only()
        {
            Logger.Info("Starting test" + "-------------------------------------------");
            // ARRANGE
            restRequest.RequestFormat = DataFormat.Json;
            // Test string
            String strSubtitle1Expected = "This is SubTitle1";
            String strSubtitle1DupExpected = "This is SubTitle1";

            // using forming request
            var agenda = new Agenda
            {
                Sections = new List<SectionBase>
                 {
                     new SimpleSection
                     {
                         Fields = new List<FieldBase>
                         {
                             new TextField
                             {
                                 Name = CoverSectionFieldNames.SubTitle1,
                                 Content = strSubtitle1Expected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             },

                             new TextField
                             {
                                 Name = CoverSectionFieldNames.SubTitle1,
                                 Content = strSubtitle1DupExpected,
                                 Font = new ASI.AB.Domain.Fields.Font
                                 {
                                     Color = "#FFF660"
                                 }
                             }
                         }
                     }
                 }
            };

            //serialize json
            var json = restRequest.JsonSerializer.Serialize(agenda);
            restRequest.AddParameter("application/json; charset=utf-8", json, ParameterType.RequestBody);

            // ACT
            IRestResponse restResponse = restClient.Execute(restRequest);
            byte[] response = restClient.DownloadData(restRequest);

            downLoadPath = "C:\\AgendaBuilder\\SubTitles.docx";

            File.WriteAllBytes(downLoadPath, response);

            // retriving text from word based on location
            String strSubtitle1Actual = GetDataFromWord(downLoadPath, 1).Trim();
            String strSubtitle1DupActual = GetDataFromWord(downLoadPath, 1).Trim();


            // ASSERT
            Assert.AreEqual(strSubtitle1Expected, strSubtitle1Actual);
            Assert.AreEqual(strSubtitle1DupExpected, strSubtitle1DupActual);

        }



        //compare images

        static bool ImageCompareArray(Bitmap InputImage, Bitmap OutputImage)
        {
            bool flag = true;
            string inputPixel;
            string outputPixel;
            if (InputImage.Width == OutputImage.Width && InputImage.Height == OutputImage.Height)
            {
                for (int i = 0; i < InputImage.Width; i++)
                {
                    for (int j = 0; j < InputImage.Height; j++)
                    {
                        inputPixel = InputImage.GetPixel(i, j).ToString();
                        outputPixel = OutputImage.GetPixel(i, j).ToString();
                        if (inputPixel != outputPixel)
                        {
                            flag = false; break;
                        }
                    }
                }
                if (flag == false)
                {
                    return false;
                }
                else
                {
                    return true;
                }
            }
            else
            {
                return false;
            }
        }


        protected static byte[] ReadImageFile(string imageLocation)
        {
            var fileInfo = new FileInfo(imageLocation);
            var imageFileLength = fileInfo.Length;
            var fs = new FileStream(imageLocation, FileMode.Open, FileAccess.Read);
            var br = new BinaryReader(fs);

            return br.ReadBytes((int)imageFileLength);
        }

    }


}
